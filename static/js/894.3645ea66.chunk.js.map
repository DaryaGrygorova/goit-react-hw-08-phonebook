{"version":3,"file":"static/js/894.3645ea66.chunk.js","mappings":"+QAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mMAWVE,EAAQF,EAAAA,GAAAA,MAAH,2CAILG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6EAKLK,EAASL,EAAAA,GAAAA,OAAH,oUAEF,SAAAM,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACH,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACA,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACD,SAAAF,GAAC,OAAIA,EAAEC,MAAME,MAAMC,EAAlB,IACF,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,OAAnB,IACG,SAAAN,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,OAAnB,IACZ,SAAAN,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,IAIY,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,OAAOG,SAAnB,IACZ,SAAAR,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,IACM,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,I,oBC0BrB,EAvDsB,WACpB,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,GAAeC,EAAAA,EAAAA,MACfC,GAAkBD,EAAAA,EAAAA,MAKlBE,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,MAAOF,EAAAA,KAEJG,SAAS,gCACTC,QANH,uJAMwB,yBACxBC,SAAUL,EAAAA,KAEPG,SAAS,kCACTC,QATkB,0CAWjB,iLAUN,OACE,SAAC,KAAD,CACEE,cAAe,CAAEJ,MAAO,GAAIG,SAAU,IACtCN,iBAAkBA,EAClBQ,SAVoB,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAChCf,GAASgB,EAAAA,EAAAA,KAAM,UAAKF,KACpBG,QAAQC,KAAR,UAAiBJ,IACjBC,GACD,EAGC,UAKE,UAAC/B,EAAD,YACE,SAACG,EAAD,CAAOgC,QAASjB,EAAhB,qBACA,SAACd,EAAD,CAAOgC,GAAIlB,EAAcmB,KAAK,QAAQC,KAAK,QAAQC,aAAa,SAChE,SAAC,KAAD,CAAcD,KAAK,QAAQE,UAAU,SAErC,SAACrC,EAAD,CAAOgC,QAASf,EAAhB,uBACA,SAAChB,EAAD,CACEgC,GAAIhB,EACJiB,KAAK,WACLC,KAAK,WACLC,aAAa,SAEf,SAAC,KAAD,CAAcD,KAAK,WAAWE,UAAU,SAExC,SAAClC,EAAD,CAAQ+B,KAAK,SAAb,wBAIP,ECnDD,EARkB,WAChB,OACE,SAACI,EAAA,EAAD,WACE,SAAC,EAAD,KAGL,C,gFCPYC,E,QAAQzC,GAAAA,GAAH,oEACD,SAAAM,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,UCclB,EAbgB,SAAC,GAAyB,IAAvBkC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,UAACC,EAAA,EAAD,CAAKC,OAAO,cAAcC,SAAS,SAASC,GAAG,UAA/C,UACGL,IAAS,SAACD,EAAD,UAAQC,IACjBC,IAGN,C","sources":["components/UserLogInForm/UserLogInForm.styled.js","components/UserLogInForm/UserLogInForm.jsx","Pages/LoginPage.jsx","components/Section/Section.styled.js","components/Section/Section.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 15px;\n  margin: 0 auto;\n  max-width: 600px;\n  border: 1px solid #6f4e37;\n  border-radius: 10px;\n`;\n\nexport const Label = styled.label`\nfont-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  border: 1px solid #6f4e37;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  width: 130px;\n  padding-top: ${p => p.theme.space[1]}px;\n  padding-bottom: ${p => p.theme.space[1]}px;\n  padding-left: ${p => p.theme.space[3]}px;\n  padding-right: ${p => p.theme.space[3]}px;\n  border-radius: ${p => p.theme.radii.md};\n  border-color: ${p => p.theme.colors.primary};\n  background-color: ${p => p.theme.colors.primary};\n  color: ${p => p.theme.colors.white};\n\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.secondary};\n    color: ${p => p.theme.colors.white};\n    border-color: ${p => p.theme.colors.white};\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nimport { useDispatch } from 'react-redux';\n\nimport { StyledForm, Label, Input, Button } from './UserLogInForm.styled';\nimport { logIn } from '../../redux/user/userOperations';\n\nconst UserLogInForm = () => {\n  const dispatch = useDispatch();\n\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const emailRegExp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const passwordRegExp = /^(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  const validationSchema = yup.object().shape({\n    email: yup\n      .string()\n      .required('\"E-mail\" is a required field')\n      .matches(emailRegExp, 'The E-mail is invalid'),\n    password: yup\n      .string()\n      .required('\"Password\" is a required field')\n      .matches(\n        passwordRegExp,\n        'The password must contain only letters and numbers. It must contain at least one lowercase character and one uppercase character. Password length is at least 8 characters.'\n      ),\n  });\n\n  const onSubmitHandler = (value, { resetForm }) => {\n    dispatch(logIn({ ...value }));\n    console.log({ ...value });\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={onSubmitHandler}\n    >\n      <StyledForm>\n        <Label htmlFor={emailInputId}>E-mail</Label>\n        <Input id={emailInputId} type=\"email\" name=\"email\" autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"div\" />\n\n        <Label htmlFor={passwordInputId}>Password</Label>\n        <Input\n          id={passwordInputId}\n          type=\"password\"\n          name=\"password\"\n          autoComplete=\"off\"\n        />\n        <ErrorMessage name=\"password\" component=\"div\" />\n\n        <Button type=\"submit\">Log in</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nexport default UserLogInForm;\n","import Section from 'components/Section';\nimport UserLogInForm from 'components/UserLogInForm';\n\nconst LoginPage = () => {\n  return (\n    <Section>\n      <UserLogInForm />\n    </Section>\n  );\n};\n\nexport default LoginPage;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h2`\nmargin-bottom: ${p => p.theme.space[4]}px;\ntext-align: center;\n`;","import PropTypes from 'prop-types';\nimport { Box } from '../Box';\nimport { Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Box margin=\"0 auto 25px\" maxWidth=\"1440px\" as=\"section\">\n      {title && <Title>{title}</Title>}\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n"],"names":["StyledForm","styled","Form","Label","Input","Field","Button","p","theme","space","radii","md","colors","primary","white","secondary","dispatch","useDispatch","emailInputId","nanoid","passwordInputId","validationSchema","yup","shape","email","required","matches","password","initialValues","onSubmit","value","resetForm","logIn","console","log","htmlFor","id","type","name","autoComplete","component","Section","Title","title","children","Box","margin","maxWidth","as"],"sourceRoot":""}