{"version":3,"file":"static/js/591.18ff0e65.chunk.js","mappings":"+QAGaA,GAAaC,EAAAA,EAAAA,IAAOC,EAAAA,GAAPD,CAAH,mMAWVE,EAAQF,EAAAA,GAAAA,MAAH,2CAILG,GAAQH,EAAAA,EAAAA,IAAOI,EAAAA,GAAPJ,CAAH,6EAKLK,EAASL,EAAAA,GAAAA,OAAH,oUAEF,SAAAM,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACE,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACH,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACA,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IACD,SAAAF,GAAC,OAAIA,EAAEC,MAAME,MAAMC,EAAlB,IACF,SAAAJ,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,OAAnB,IACG,SAAAN,GAAC,OAAIA,EAAEC,MAAMI,OAAOC,OAAnB,IACZ,SAAAN,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,IAIY,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,OAAOG,SAAnB,IACZ,SAAAR,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,IACM,SAAAP,GAAC,OAAIA,EAAEC,MAAMI,OAAOE,KAAnB,I,oBC6CrB,EArE6B,WAC3B,IAAME,GAAWC,EAAAA,EAAAA,MAEXC,GAAcC,EAAAA,EAAAA,MACdC,GAAeD,EAAAA,EAAAA,MACfE,GAAkBF,EAAAA,EAAAA,MAOlBG,EAAmBC,EAAAA,KAAaC,MAAM,CAC1CC,KAAMF,EAAAA,KAEHG,SAAS,8BACTC,QARH,yHAUI,0IAEJC,MAAOL,EAAAA,KAEJG,SAAS,gCACTC,QAbH,uJAawB,yBACxBE,SAAUN,EAAAA,KAEPG,SAAS,kCACTC,QAhBkB,0CAkBjB,iLAUN,OACE,SAAC,KAAD,CACEG,cAAe,CAAEL,KAAM,GAAIG,MAAO,GAAIC,SAAU,IAChDP,iBAAkBA,EAClBS,SAVoB,SAACC,EAAD,GAA2B,IAAjBC,EAAgB,EAAhBA,UAChCjB,GAASkB,EAAAA,EAAAA,KAAO,UAAKF,KACrBG,QAAQC,KAAR,UAAiBJ,IACjBC,GACD,EAGC,UAKE,UAACjC,EAAD,YACE,SAACG,EAAD,CAAOkC,QAASnB,EAAhB,mBACA,SAACd,EAAD,CAAOkC,GAAIpB,EAAaqB,KAAK,OAAOd,KAAK,OAAOe,aAAa,SAC7D,SAAC,KAAD,CAAcf,KAAK,OAAOgB,UAAU,SAEpC,SAACtC,EAAD,CAAOkC,QAASjB,EAAhB,qBACA,SAAChB,EAAD,CAAOkC,GAAIlB,EAAcmB,KAAK,QAAQd,KAAK,QAAQe,aAAa,SAChE,SAAC,KAAD,CAAcf,KAAK,QAAQgB,UAAU,SAErC,SAACtC,EAAD,CAAOkC,QAAShB,EAAhB,uBACA,SAACjB,EAAD,CACEkC,GAAIjB,EACJkB,KAAK,WACLd,KAAK,WACLe,aAAa,SAEf,SAAC,KAAD,CAAcf,KAAK,WAAWgB,UAAU,SAExC,SAACnC,EAAD,CAAQiC,KAAK,SAAb,yBAIP,ECtED,EARqB,WACnB,OACE,SAACG,EAAA,EAAD,WACE,SAAC,EAAD,KAGL,C,gFCPYC,E,QAAQ1C,GAAAA,GAAH,oEACD,SAAAM,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,UCclB,EAbgB,SAAC,GAAyB,IAAvBmC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACxB,OACE,UAACC,EAAA,EAAD,CAAKC,OAAO,cAAcC,SAAS,SAASC,GAAG,UAA/C,UACGL,IAAS,SAACD,EAAD,UAAQC,IACjBC,IAGN,C","sources":["components/UserRegistrationForm/UserRegistrationForm.styled.js","components/UserRegistrationForm/UserRegistrationForm.jsx","Pages/RegisterPage.jsx","components/Section/Section.styled.js","components/Section/Section.jsx"],"sourcesContent":["import styled from 'styled-components';\nimport { Form, Field } from 'formik';\n\nexport const StyledForm = styled(Form)`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  padding: 15px;\n  margin: 0 auto;\n  max-width: 600px;\n  border: 1px solid #6f4e37;\n  border-radius: 10px;\n`;\n\nexport const Label = styled.label`\nfont-weight: 700;\n`;\n\nexport const Input = styled(Field)`\n  border: 1px solid #6f4e37;\n  border-radius: 4px;\n`;\n\nexport const Button = styled.button`\n  width: 130px;\n  padding-top: ${p => p.theme.space[1]}px;\n  padding-bottom: ${p => p.theme.space[1]}px;\n  padding-left: ${p => p.theme.space[3]}px;\n  padding-right: ${p => p.theme.space[3]}px;\n  border-radius: ${p => p.theme.radii.md};\n  border-color: ${p => p.theme.colors.primary};\n  background-color: ${p => p.theme.colors.primary};\n  color: ${p => p.theme.colors.white};\n\n  :hover,\n  :focus {\n    background-color: ${p => p.theme.colors.secondary};\n    color: ${p => p.theme.colors.white};\n    border-color: ${p => p.theme.colors.white};\n  }\n`;\n","import { nanoid } from 'nanoid';\nimport { Formik, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\n\nimport { useDispatch } from 'react-redux';\n\nimport {\n  StyledForm,\n  Label,\n  Input,\n  Button,\n} from './UserRegistrationForm.styled';\nimport { signUp } from '../../redux/user/userOperations';\n\nconst UserRegistrationForm = () => {\n  const dispatch = useDispatch();\n\n  const nameInputId = nanoid();\n  const emailInputId = nanoid();\n  const passwordInputId = nanoid();\n\n  const nameRegExp =\n    /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/;\n  const emailRegExp =\n    /^(([^<>()[\\]\\\\.,;:\\s@\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n  const passwordRegExp = /^(?=.*[a-z])(?=.*[A-Z])[0-9a-zA-Z]{8,}$/;\n  const validationSchema = yup.object().shape({\n    name: yup\n      .string()\n      .required('\"Name\" is a required field')\n      .matches(\n        nameRegExp,\n        \"Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan\"\n      ),\n    email: yup\n      .string()\n      .required('\"E-mail\" is a required field')\n      .matches(emailRegExp, 'The E-mail is invalid'),\n    password: yup\n      .string()\n      .required('\"Password\" is a required field')\n      .matches(\n        passwordRegExp,\n        'The password must contain only letters and numbers. It must contain at least one lowercase character and one uppercase character. Password length is at least 8 characters.'\n      ),\n  });\n\n  const onSubmitHandler = (value, { resetForm }) => {\n    dispatch(signUp({ ...value }));\n    console.log({ ...value });\n    resetForm();\n  };\n\n  return (\n    <Formik\n      initialValues={{ name: '', email: '', password: '' }}\n      validationSchema={validationSchema}\n      onSubmit={onSubmitHandler}\n    >\n      <StyledForm>\n        <Label htmlFor={nameInputId}>Name</Label>\n        <Input id={nameInputId} type=\"text\" name=\"name\" autoComplete=\"off\" />\n        <ErrorMessage name=\"name\" component=\"div\" />\n\n        <Label htmlFor={emailInputId}>E-mail</Label>\n        <Input id={emailInputId} type=\"email\" name=\"email\" autoComplete=\"off\" />\n        <ErrorMessage name=\"email\" component=\"div\" />\n\n        <Label htmlFor={passwordInputId}>Password</Label>\n        <Input\n          id={passwordInputId}\n          type=\"password\"\n          name=\"password\"\n          autoComplete=\"off\"\n        />\n        <ErrorMessage name=\"password\" component=\"div\" />\n\n        <Button type=\"submit\">Sign up</Button>\n      </StyledForm>\n    </Formik>\n  );\n};\n\nexport default UserRegistrationForm;\n","import Section from 'components/Section';\nimport UserRegistrationForm from 'components/UserRegistrationForm';\n\nconst RegisterPage = () => {\n  return (\n    <Section>\n      <UserRegistrationForm />\n    </Section>\n  );\n};\n\nexport default RegisterPage;\n","import styled from \"styled-components\";\n\nexport const Title = styled.h2`\nmargin-bottom: ${p => p.theme.space[4]}px;\ntext-align: center;\n`;","import PropTypes from 'prop-types';\nimport { Box } from '../Box';\nimport { Title } from './Section.styled';\n\nconst Section = ({ title, children }) => {\n  return (\n    <Box margin=\"0 auto 25px\" maxWidth=\"1440px\" as=\"section\">\n      {title && <Title>{title}</Title>}\n      {children}\n    </Box>\n  );\n};\n\nSection.propTypes = {\n  title: PropTypes.string,\n};\n\nexport default Section;\n"],"names":["StyledForm","styled","Form","Label","Input","Field","Button","p","theme","space","radii","md","colors","primary","white","secondary","dispatch","useDispatch","nameInputId","nanoid","emailInputId","passwordInputId","validationSchema","yup","shape","name","required","matches","email","password","initialValues","onSubmit","value","resetForm","signUp","console","log","htmlFor","id","type","autoComplete","component","Section","Title","title","children","Box","margin","maxWidth","as"],"sourceRoot":""}